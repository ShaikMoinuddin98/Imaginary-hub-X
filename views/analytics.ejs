<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Imaginary Hub Writer Analytics</title>
    <link rel="stylesheet" href="/public/assests/css/mainstyle.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<link
    href="/assests/svg/IH X.png"
    rel="shortcut icon" type="image/x-icon" />
<link
    href="/assests/svg/IH X.png"
    rel="apple-touch-icon" />
    <style>
        body {
            background-color: #f5f6fa;
        }
        .brand-header {
            background-color: #343a40;
            color: white;
            padding: 15px;
            text-align: center;
        }
        .back-to-profile {
            text-align: right;
            margin: 10px;
        }
        .card {
            margin-top: 20px;
        }
        .inline-charts {
            display: flex;
            justify-content: space-around;
            margin-top: 20px;
        }
        canvas {
            max-width: 400px;
            max-height: 400px;
        }
    </style>
</head>
<body>

    <!-- Brand Header -->
    <div class="brand-header">
        <h1>Imaginary Hub X Analytics</h1>
    </div>

    <!-- Back to Profile -->
    <div class="back-to-profile">
        <a href="/dashboard" class="btn btn-secondary">Back to Profile</a>
    </div>

    <!-- Analytics Cards -->
    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">Monthly Readers</h5>
                        <p id="monthlyReaders" class="card-text">Loading...</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">Engagement Rate</h5>
                        <p id="engagementRate" class="card-text">Loading...</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">Money Generated</h5>
                        <p id="moneyGenerated" class="card-text">Loading...</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Pie Charts for Traffic and Geography -->
        <!-- <div class="inline-charts">
            <canvas id="trafficChart"></canvas>
            <canvas id="geoChart"></canvas>
        </div> -->

        <!-- Article Performance -->
        <div class="mt-4">
            <select id="articleSelect" class="form-select" onchange="updateArticlePerformance()">
                <!-- <option value="Article 1">Article 1</option>
                <option value="Article 2">Article 2</option>
                <option value="Article 3">Article 3</option> -->
            </select>
            <div id="articleDetails" class="mt-3">
                <p>Select an article to view its performance.</p>
            </div>
            <div class="inline-charts" id="articleGraphs" style="display:none;">
                <canvas id="readersChart"></canvas>
                <canvas id="engagementChart"></canvas>
                <canvas id="revenueChart"></canvas>
            </div>
        </div>

        <!-- Monthly Trends
        <h4 class="mt-4">Monthly Trends</h4>
        <canvas id="monthlyTrendsChart"></canvas> -->

    </div>

    <script>
        let fetchedData = null; // Hold data globally once fetched

        async function fetchData() {

            const response = await fetch('/get-analytics'); // Replace with actual API endpoint
            if (!response.ok) throw new Error('Failed to fetch engagement data');

            let data = await response.json();
             data=data.article
             console.log(data)
             let monthlyReaders=0,engagementRate=0,moneyGenerated=0;
             let articlesdata=[]
             for(i of data){
                monthlyReaders+=i.views
                engagementRate+=i.engagementRatio
                articlesdata.push({title:i.title,readers:i.views,engagement:i.engagementRatio.toFixed(0)})
             }
            // Simulated dynamic data fetching from the backend
            return {
                monthlyReaders,
                moneyGenerated,
                engagementRate:engagementRate.toFixed(0)/data.length,
                articleData:articlesdata,
                trafficSources: [30, 50, 10, 10],
                geography: [40, 30, 15, 10, 5],
                monthlyTrends: {
                    readers: [100, 200, 300, 400, 500],
                    engagement: [50, 60, 70, 80, 90],
                    revenue: [20, 30, 40, 50, 60]
                }
            };
        }

        async function updateDashboard() {
            fetchedData = await fetchData(); // Fetch data once and store it globally

            let selecttag=document.querySelector("#articleSelect")
            for(i of fetchedData.articleData){
                let opt=document.createElement("option")
                opt.value=i.title
                opt.innerText=i.title
                selecttag.appendChild(opt)
            }
            

            document.getElementById('monthlyReaders').innerText = fetchedData.monthlyReaders;
            document.getElementById('engagementRate').innerText = `${fetchedData.engagementRate}%`;
            document.getElementById('moneyGenerated').innerText = `$${fetchedData.moneyGenerated}`;

            // Update traffic chart
            const ctxTraffic = document.getElementById('trafficChart').getContext('2d');
            const trafficData = {
                labels: ['Social Media', 'Search Engines', 'Direct', 'Referrals'],
                datasets: [{
                    label: 'Traffic Sources',
                    data: fetchedData.trafficSources,
                    backgroundColor: ['purple', 'blue', 'green', 'orange'],
                }]
            };
            new Chart(ctxTraffic, {
                type: 'pie',
                data: trafficData,
            });

            // Update geography chart
            const ctxGeo = document.getElementById('geoChart').getContext('2d');
            const geoData = {
                labels: ['USA', 'India', 'UK', 'Canada', 'Australia'],
                datasets: [{
                    label: 'Readers Geography',
                    data: fetchedData.geography,
                    backgroundColor: ['purple', 'blue', 'green', 'orange', 'red'],
                }]
            };
            new Chart(ctxGeo, {
                type: 'pie',
                data: geoData,
            });

            // Monthly trends chart
            const ctxMonthlyTrends = document.getElementById('monthlyTrendsChart').getContext('2d');
            const monthlyData = {
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],
                datasets: [
                    {
                        label: 'Readers',
                        data: fetchedData.monthlyTrends.readers,
                        borderColor: 'blue',
                        fill: false,
                    },
                    {
                        label: 'Engagement',
                        data: fetchedData.monthlyTrends.engagement,
                        borderColor: 'green',
                        fill: false,
                    },
                    {
                        label: 'Revenue',
                        data: fetchedData.monthlyTrends.revenue,
                        borderColor: 'orange',
                        fill: false,
                    }
                ]
            };
            new Chart(ctxMonthlyTrends, {
                type: 'line',
                data: monthlyData,
            });
        }

        async function updateArticlePerformance() {
            const selectedArticle = document.getElementById('articleSelect').value;
            const selectedData = fetchedData.articleData.find(article => article.title === selectedArticle);

            document.getElementById('articleDetails').innerHTML = `
                <p><strong>Title:</strong> ${selectedData.title}</p>
                <p><strong>Readers:</strong> ${selectedData.readers}</p>
                <p><strong>Engagement:</strong> ${selectedData.engagement}%</p>
                <p><strong>Revenue:</strong> $${selectedData.revenue}</p>
            `;

            // Show article graphs
            document.getElementById('articleGraphs').style.display = 'flex';

            // Update readers chart
            const ctxReaders = document.getElementById('readersChart').getContext('2d');
            const readersData = {
                labels: ['Total Readers'],
                datasets: [{
                    label: 'Readers',
                    data: [selectedData.readers],
                    backgroundColor: ['blue'],
                }]
            };
            new Chart(ctxReaders, {
                type: 'bar',
                data: readersData,
            });

            // Update engagement chart
            const ctxEngagement = document.getElementById('engagementChart').getContext('2d');
            const engagementData = {
                labels: ['Engagement Rate'],
                datasets: [{
                    label: 'Engagement',
                    data: [selectedData.engagement],
                    backgroundColor: ['green'],
                }]
            };
            new Chart(ctxEngagement, {
                type: 'bar',
                data: engagementData,
            });

            // Update revenue chart
            const ctxRevenue = document.getElementById('revenueChart').getContext('2d');
            const revenueData = {
                labels: ['Revenue Generated'],
                datasets: [{
                    label: 'Revenue',
                    data: [selectedData.revenue],
                    backgroundColor: ['orange'],
                }]
            };
            new Chart(ctxRevenue, {
                type: 'bar',
                data: revenueData,
            });
        }

        // Initialize dashboard on page load
        updateDashboard();
    </script>
</body>
</html>
